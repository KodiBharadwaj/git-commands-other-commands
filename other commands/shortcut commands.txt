General:
node: nodevars
open visual code studio directly: code . 


Open Local running application in mobile:
-> Mobile and laptop should be in same network
-> Run frontend with (if angular): ng serve --host 0.0.0.0
-> Now we will get ex: http://192.168.1.34:4200
-> Now update this url in @CrossOrigin and security config file in backend
-> Now in env files in frontend, change the backend url to Ex: BASE_URL : 'http://192.168.1.34:8765'
-> Simply replace localhost with our local computer ip. 
-> To know type inconfig in terminal and search for ipv4 Address.


typescript:
to run : tsc "name".ts && node "name"


angular:
install angular: npm install -g @angular/cli
create angular app: ng new "name"
run the file: ng serve
create a component: ng g c "name"
to build files(used to upload in cloud for deployment): ng build
to create services: ng g s "name"
to create guard: ng g g "name"
to create pipe : ng g p "name"
to create interceptor: ng generate interceptor "name"
to create guard: ng generate guard "name"

mongodb:
to start mongo database: mongod

switch database: use db
to read collections: db.collectionName.find()

jest:testing
start: npm init
npm i --save-dev @types/jest or npm install jest


GitHub permission command: git config --global http.sslVerify false
git push commands:
a) git add .
b) git commit -m "name"
c) git push -u origin main/master or simply git push
d) If not pushed try: git remote -v



Run spring boot app Jar file in amazon cli:
install git in aws cli: sudo yum install git -y
install java in cli: sudo yum install java-21-amazon-corretto-headless -y
install maven in cli: sudo yum install maven -y
to run java in aws cli: mvn spring-boot:run
to run jar file in cli: java -jar fileName.jar (same with war file)


to upload jar file in aws cli:
scp -i "ust-ec2-key.pem" trainee-app.jar ec2-user@54.147.170.59:/home/ec2-user


Postgres:
postgres query to fetch all the table names in a database:
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';



Check Port and stop:
netstat -aon | findstr :<port_number>
taskkill /PID <PID_number> /F


Docker:
To see container: docker ps & docker ps -a
To see the images: docker images
run the docker: docker run -p 3309:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql-container -d mysq
execute it: docker exec -it mysql-container bash
then: mysql -u root -p
Now Enter the password.

Pull the images: docker pull imgage-name
Run the respective image: docker run -p 3000:80 --name easy-recipes ram1uj/easy-recipes

Push repository into the docker hub:
docker login
docker tag spring-boot-app kodibharadwaj/spring-boot-app
docker push kodibharadwaj/spring-boot-app

IntelliJ project building:
docker build -t todo-app .
create a Dockerfile and paste it:
FROM openjdk:21-jdk-slim
WORKDIR /
ADD target/*.jar app.jar
CMD ["java", "-jar", "app.jar"]


Run spring boot with database on docker:
create docker network: 
docker network create some-name

run postgres/MySQL on that n/w:
docker run --name postgres -e POSTGRES_PASSWORD=pass@word1 --network=spring-boot-db-network -d -p 5432:5432 postgres

Spring boot app on that n/w:
docker run -p 8080:8080 --name=todo-app --network=spring-boot-db-network -e POSTGRES_HOST=postgres -e POSTGRES_PORT=5432 -e POSTGRES_DB=postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=pass@word1 -d todo-app

docker logs name-of-container (to checks the logs)

stop & start the docker:
sotp:
docker stop todo-app
docker stop postgres

start: 
docker start todo-app
docker start postgres

docker-composer:
docker compose config
docker compose up 
docker compose down


Install Docker & Docker composer in AWS and run it:
sudo yum install docker -y

sudo service docker start 

sudo usermod -a -G docker ec2-user

sudo docker pull kodibharadwaj/todo-app

sudo docker pull postgres(no need of pulling if we user docker-compose.yml file)

sudo docker images (to check)

nano docker-compose.yml
and paste it 

sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

sudo docker-compose version

sudo docker-compose config

sudo docker-compose up -d or sudo docker-compose up -d --no-build


docker-compose.yml file should like this:

version: '3.7'

services:

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    networks:
      - app-network

  todo-app:
    image: kodibharadwaj/todo-app:latest  # Corrected image reference
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - postgres
    networks:
      - app-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres  # Ensure these match PostgreSQL environment
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres

networks:
  app-network:
    driver: bridge





